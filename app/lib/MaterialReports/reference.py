import pandas as pd
import numpy as np

"""Номера Reservations, материалы по которым уже списаны"""
inactive_Reservations= [
### RMPD
771,848,937,938,939,1049,1050,1051,1114,1272,1320,1322,1452,1592,1609,3798,1871,1873,1874,1902,1922,1924,2356,2306,2355,2826,3806,3843,2859,2873,3088,3093,3927,3135,3242,3797,
3826,3983,3827,3845,3977,3978,3979,3980,4346,4347,4348,4349,4038,4039,4040,4041,4042,4043,4125,4126,4159,4178,4194,4182,4198,4251,4252,4324,4325,921,2357,3227,3257,1126,885,
1901,1921,1923,756,2045,2044, 465, 798, 799,
### CofE
1538, 1756, 1847, 1946, 2695, 4554, 4555, 4556, 4557, 4684, 4685, 5244, 5311, 5418, 4014, 4116, 4117, 4155, 4245, 4394, 4396, 4463, 4620, 1350, 2886, 4015, 4761, 4763, 4765, 5362, 
2887, 4826, 4782, 4483, 3032, 3033, 3412, 3414, 3416, 3418, 3423, 3465, 3471, 3485, 3489, 3507, 3515, 3596, 3766, 4095, 3396, 3397, 3398, 3399, 3400, 3405, 3408, 3409, 3410, 3411, 
3413, 3420, 3422, 3424, 3428, 3434, 3455, 3457, 3460, 3470, 3472, 3475, 3479, 3482, 3483, 3486, 3490, 3513, 3516, 3519, 3521, 3524, 3552, 3591, 3597, 3767, 4480, 3545, 4119, 4623, 
4754, 5310, 5374, 5416, 4481, 4552, 1774, 4244, 1222, 1442, 1755, 1776, 1948, 2646, 4385, 4756, 5246, 5415, 1777, 2647, 4053, 4154, 4196, 4246, 4386, 4398, 4462, 4619, 4707, 4747, 
4755, 5417, 1791, 2323, 4749, 2916, 3020, 3097, 3180, 3184, 3544, 3624, 4047, 3910, 4401, 4037, 4081, 4115, 5430, 4118, 4140, 4397, 4402, 5248, 5249, 4403, 4465, 4404, 4461, 4621, 
4705, 5247, 5312, 5375, 4406, 4464, 4706, 4822, 4823, 4824, 4825, 5250, 5373, 5548, ]


"""Номера Mater Reservations, материалы по которым уже списаны"""
inactive_Master_Reservations  = [
### CofE
782,787,788,846,851,857,904,905,908,935,954,986,1009,1129,1311,1312,1313,1314,1341,1342,1343,1424,1426,1439,1443,1551,1560,1593,1594,1599,1603,1629,1631,1697,1698,1710,1848,
1849,1852,2278,2307,2335,2648,2649,2679,2816,2908,2955,2956,2957,2959,3146,3147,3148,3203,3204,5527,5528,5536,
 ]


"""Номера Материальных Кодов, относящихся к 014 Забалансовому счёту"""
is_014 = ['6935','5841','7139','5230','4189','3494','2799','5749','1738','1308','1309','1310','1311','1312','1329','1330','1331','1333','1351','1354','1372','1374','1376',
'1377','1378', '892','2204','4179','0158','0140','0134','0114','0915','1278','1276','1275','1277','1272','1279','3190','2995','2806','2812','2813','2814','2826','2827','2828',
'2830','2896','2897','1307','1353','1373', '3904','1375','2325','1393','3484','3017','2786','3019','4662','0899','3745','1367','2890','2891','2892','2893','2894','2452','2092',
'2451','2817','0155','0156','0526','0002','4188','2910','6597', '7277','1622','1625','1623','1626','1624','3222','1628','1630','1627','1632','0009','0001','4346','6860','1274',
'1273','1352','2854','2863','2885','3480','1349','3226','2824','2935','1344','6601', '6600','1337','1313','1315','1316','1317','1320','1321','1322','1323','1325','1326','1327',
'1568','1635','1570','1571','1588','1590','1591','1636','1603','1604','1621','2804','2807','2809','2815', '6598','2816','2818','2819','2820','2821','2822','2823','2831','2834',
'2840','2845','2846','2847','2848','2851','2856','2858','2860','2861','2864','2878','2880','2881','2882','2883','2884','2886', '6599','2887','2888','2899','2900','2901','2902',
'2903','2906','2936','3260','0809','0810','2453','0678','0157','0203','0113','0158','0159','6136','1575','1578','0154','6899','2450','5359','6799','3227','1379','1382','1314',
'1319','2879','1366','2857','2865','0007','0008','5942','4140','5752','6330','1189','1324','0865','1369','0863','1355','1387','0804','1587','1328','1332','2829','1406','0806',
'0805','1338','1342','1343','1339','1340','1341','2855','2852','3223','2862','1334','1335','1336','2850','2859','2853','1403','1574','1576','1577','1582','1360','1361','1364',
'1365','1429','1407','0691','0692','0693','0694','0695','0700','0703','0702','0705','0706','0707','0708','1350','1371','1380','1381','1383','1384','1385','1386','1394', '1395',
'1396','1398','1399','1589','1639','1606','1620','2835','0189','0745','0140','0230','0738','5232','5231','0899','0155','0114','0157','0526','0113','1201','1202','1203','1204',
'6340','2911','2912','2913','7481','7407','7473','7403','2802','3229','5305','6122','6332','6900','7497','7883','7882','9300','7331','5831','5328', ]



"""Фильтры для отделения transactions отдела"""
department_Filters = {
    'rmpd':[
        {"field":'isRMPD', "operator":"==", "value":"'yes'"}, 
        "&", 
        {"field":'Reserved By', "operator":"!=", "value":"'Mirjakhon Toirov'"}, 
        "&",
        {"field":'Reserved By', "operator":"!=", "value":"'Bobur Aralov'"}
    ],
    'cofe':[ 
        {"field":'Reserved By', "operator":"==", "value":"'Mirjakhon Toirov'"},
    ],
    'ap':[ 
        {"field":'Account Code Description', "operator":"==", "value":"Air Product Service Expences"},
    ]
}


"""Читает отчёт из 1С и возвращает цену в сумах, группу учёта, """
def OneC():
  prices = pd.read_excel("1. 1C.xlsx").rename(columns={'Unnamed: 1':'Kod', 'Unnamed: 2':'Name', 'Unnamed: 5':'Qty1', 'Unnamed: 6':'Sum1','Unnamed: 7':'Qty2', 'Unnamed: 8':'Sum2'}).iloc[16: ][['Kod', 'Name','Qty1','Sum1','Qty2','Sum2']]
  prices['Kod'] = prices['Kod'].astype(str)
  prices['Код товара'] = prices['Kod'].copy().map(lambda x: x[-4:])
  prices[['Sum1','Sum2','Qty1','Qty2']] = prices[['Sum1','Sum2','Qty1','Qty2']].fillna(0)
  prices['Цена'] = (prices['Sum1']+prices['Sum2'])/(prices['Qty1']+prices['Qty2'])

  prices['Account'] = prices['Kod']
  prices.loc[ ~prices['Name'].isna(), 'Account' ] = np.nan
  prices['Account'] = prices['Account'].ffill()

  prices = prices.loc[ ~prices['Name'].isna(), ['Account', 'Код товара', 'Цена'] ]
  return prices

"""Читает накладную из 1С и возвращает цену в сумах, группу учёта, """
def OneCW():
  waybill = pd.read_excel("1. 1CW.xlsx")
  waybill = waybill[['Unnamed: 6','Unnamed: 1','Unnamed: 11','Unnamed: 23','Unnamed: 15','Unnamed: 24']].iloc[16:]
  waybill = waybill.loc[~waybill['Unnamed: 6'].isnull()]
  return waybill
